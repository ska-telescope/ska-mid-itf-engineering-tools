#!/usr/bin/python
"""Read all information about Tango devices."""
import getopt
import json
import logging
import os
import sys
from typing import Any, TextIO

from ska_mid_itf_engineering_tools import __version__
from ska_mid_itf_engineering_tools.k8s_info.get_k8s_info import KubernetesControl
from ska_mid_itf_engineering_tools.tango_control.ska_jargon import print_jargon
from ska_mid_itf_engineering_tools.tango_control.get_tango_devices2 import TangoctlDevices
from ska_mid_itf_engineering_tools.tango_control.test_tango_device2 import TestTangoDevice

logging.basicConfig(level=logging.WARNING)
_module_logger = logging.getLogger("tangoctl2")
_module_logger.setLevel(logging.WARNING)

KUBE_NAMESPACE = "ci-ska-mid-itf-at-1820-tmc-test-sdp-notebook-v2"


def show_namespaces() -> None:
    """
    Display namespace in Kubernetes cluster.
    """
    k8s = KubernetesControl(_module_logger)
    ns_list = k8s.get_namespaces()
    print(f"Namespaces : {len(ns_list)}")
    for ns_name in ns_list:
        print(f"\t{ns_name}")


def usage(p_name: str, cfg_data: Any) -> None:
    """
    Show how it is done.

    :param p_name: executable name
    :param cfg_data: configuration in JSON format
    """
    print("Display version number")
    print(f"\t{p_name} --version")
    print("Display help")
    print(f"\t{p_name} --help")
    print(f"\t{p_name} -h")
    print("Display Kubernetes namespaces")
    print(f"\t{p_name} --show-ns")
    print(f"\t{p_name} -n")
    print("Display Tango database address")
    print(f"\t{p_name} --show-db [--namespace=<NAMESPACE>|--host=<HOST>]")
    print(f"\t{p_name} -t [-N <NAMESPACE>|-H <HOST>]")
    print("Display Tango device names")
    print(f"\t{p_name} --show-dev [--namespace=<NAMESPACE>|--host=<HOST>]")
    print(f"\t{p_name} -d [-N <NAMESPACE>|-H <HOST>]")
    print("Display all devices")
    print(
        f"\t{p_name} --full|--list|--quick|--short [--dry-run]"
        f" [--namespace=<NAMESPACE>|--host=<HOST>]"
    )
    print(f"\t{p_name} -f|-l|-q|-s [-N <NAMESPACE>|-H <HOST>]")
    print("Filter on device name")
    print(f"\t{p_name} --full|--list|--quick|--short -D <DEVICE> [-N <NAMESPACE>|-H <HOST>]")
    print(f"\t{p_name} -f|-l|-q|-s --device=<DEVICE> [--namespace=<NAMESPACE>|--host=<HOST>]")
    print("Filter on attribute name")
    print(
        f"\t{p_name} --full|--list|--quick|--short --attribute=<ATTRIBUTE>"
        " [--namespace=<NAMESPACE>|--host=<HOST>]"
    )
    print(f"\t{p_name} -f|-l|-q|-s -A <ATTRIBUTE> [-N <NAMESPACE>|-H <HOST>]")
    print("Filter on command name")
    print(
        f"\t{p_name} --full|--list|--quick|--short --command=<COMMAND>"
        " [--namespace=<NAMESPACE>|--host=<HOST>]"
    )
    print(f"\t{p_name} -f|-l|-q|-s -C <COMMAND> [-N <NAMESPACE>|-H <HOST>]")
    print("Filter on property name")
    print(
        f"\t{p_name} --full|--list|--quick|--short --property=<PROPERTY>"
        " [--namespace=<NAMESPACE>|--host=<HOST>]"
    )
    print(f"\t{p_name} -f|-l|-q|-s -P <PROPERTY> [-N <NAMESPACE>|--host=<HOST>]")
    print("Display known acronyms")
    print(f"\t{p_name} -j")
    print("Test a Tango device")
    print(f"\t{p_name} [-N <NAMESPACE>] -D <DEVICE> [--simul=<0|1>]")
    print("Test a Tango device and read attributes")
    print(f"\t{p_name} -a [-N <NAMESPACE>] -D <DEVICE> [--simul=<0|1>]")
    print("Display attribute and command names for a Tango device")
    print(f"\t{p_name} -c [-N <NAMESPACE>] -D <DEVICE>")
    print("Turn a Tango device on")
    print(f"\t{p_name} --on [-N <NAMESPACE>] -D <DEVICE> [--simul=<0|1>]")
    print("Turn a Tango device off")
    print(f"\t{p_name} --off [-N <NAMESPACE>] -D <DEVICE> [--simul=<0|1>]")
    print("Set a Tango device to standby mode")
    print(f"\t{p_name} --standby [-N <NAMESPACE>] -D <DEVICE> [--simul=<0|1>]")
    print("Change admin mode on a Tango device")
    print(f"\t{p_name} --admin=<0|1>")
    print("Display status of a Tango device")
    print(f"\t{p_name} --status [-N <NAMESPACE>] -D <DEVICE>")
    print("Check events for attribute of a Tango device")
    print(f"\t{p_name} [-N <NAMESPACE>] -D <DEVICE> -A <ATTRIBUTE>")
    print("where:")
    print("\t-a\t\t\tflag for reading attributes")
    print("\t-c\t\t\tflag for reading command and attribute names")
    print("\t--simul=<0|1>\t\tset simulation mode off or on")
    print("\t--admin=<0|1>\t\tset admin mode off or on")
    print("\t-f|--full\t\t\t\tdisplay in full")
    print("\t-l|--list\t\t\t\tdisplay device name and status on one line")
    print("\t-q|--quick\t\t\t\tdisplay device name, status and query devices")
    print("\t-s|--short\t\t\t\tdisplay device name and status only")
    # print("\t-m\t\t\t\tdisplay in markdown format")
    print("\t-f\t\t\t\tget commands, attributes and properties regardless of state")
    print(
        "\t--device=<DEVICE>\t\tdevice name, e.g. 'csp'"
        " (not case sensitive, only a part is needed)"
    )
    print(
        "\t--namespace=<NAMESPACE>\t\tKubernetes namespace for Tango database,"
        " e.g. 'integration'"
    )
    print("\t--host=<HOST>\t\t\tTango database host and port, e.g. 10.8.13.15:10000")
    print("\t--attribute=<ATTRIBUTE>\t\tattribute name, e.g. 'obsState' (not case sensitive)")
    print("\t--command=<COMMAND>\t\tcommand name, e.g. 'Status' (not case sensitive)")
    print("\t-D <DEVICE>\t\t\tdevice name, e.g. 'csp' (not case sensitive, only a part is needed)")
    print("\t-N <NAMESPACE>\t\t\tKubernetes namespace for Tango database")
    print("\t-H <HOST>\t\t\tTango database host and port, e.g. 10.8.13.15:10000")
    print("\t-A <ATTRIBUTE>\t\t\tattribute name, e.g. 'obsState' (not case sensitive)")
    print("\t-C <COMMAND>\t\t\tcommand name, e.g. 'Status' (not case sensitive)")
    print("Note that values for device, attribute, command or property are not case sensitive.")
    print(f"Partial matches for strings longer than {cfg_data['min_str_len']} charaters are OK.")
    print("When a namespace is specified, the Tango database host will be made up as follows:")
    print(
        f"\t{cfg_data['databaseds_name']}.<NAMESPACE>.{cfg_data['cluster_domain']}"
        f":{cfg_data['databaseds_port']}"
    )
    # print(f"Run commands : {','.join(cfg_data['run_commands'])}")
    # print(f"Run commands with name : {','.join(cfg_data['run_commands_name'])}")


def main(y_arg: list) -> int:  # noqa: C901
    """
    Read and display Tango devices.

    :param y_arg: input arguments
    :return: error condition
    """
    kube_namespace: str | None = None
    dry_run: bool = False
    tgo_name: str | None = None
    dev_on: bool = False
    dev_off: bool = False
    dev_standby: bool = False
    dev_status: bool = False
    dev_admin: int | None = None
    dev_sim: int | None = None
    disp_action: int = 0
    evrythng: bool = False
    headers = True
    show_attrib: bool = False
    show_command: bool = False
    show_jargon: bool = False
    show_ns: bool = False
    show_tango: bool = False
    show_version: bool = False
    tgo_attrib: str | None = None
    tgo_cmd: str | None = None
    tgo_in_type: str | None = None
    tgo_prop: str | None = None
    tango_host: str | None = None
    fmt: str = "txt"
    try:
        opts, _args = getopt.getopt(
            y_arg[1:],
            "acefhjlmnqstvVA:C:H:D:N:P:T:",
            [
                "dry-run",
                "everything",
                "full",
                "help",
                "input",
                "list",
                "no-headers",
                "off",
                "on",
                "standby",
                "status",
                "quick",
                "short",
                "show-acronym",
                "show-db",
                "show-dev",
                "show-ns",
                "version",
                "admin=",
                "attribute=",
                "command=",
                "device=",
                "host=",
                "namespace=",
                "property=",
                "simul=",
            ],
        )
    except getopt.GetoptError as opt_err:
        print(f"Could not read command line: {opt_err}")
        return 1

    # Read configuration file
    cfg_name: str | bytes = y_arg[0] + ".json"
    cfg_file: TextIO = open(cfg_name)
    cfg_data: Any = json.load(cfg_file)
    cfg_file.close()
    databaseds_name: str = cfg_data["databaseds_name"]
    cluster_domain: str = cfg_data["cluster_domain"]
    min_str_len: int = cfg_data["min_str_len"]
    databaseds_port: int = cfg_data["databaseds_port"]

    for opt, arg in opts:
        if opt in ("-h", "--help"):
            usage(os.path.basename(y_arg[0]), cfg_data)
            sys.exit(1)
        elif opt == "-a":
            show_attrib = True
        elif opt in ("--attribute", "-A"):
            tgo_attrib = arg.lower()
        elif opt == "-c":
            show_command = True
        elif opt in ("--command", "-C"):
            tgo_cmd = arg.lower()
        # elif opt in ("-d", "--show-dev"):
        #     disp_action = 4
        elif opt in ("--device", "-D"):
            tgo_name = arg.upper()
        elif opt == "--dry-run":
            # Undocumented feature for dry runs
            dry_run = True
        elif opt in ("--everything", "-e"):
            evrythng = True
        elif opt in ("--full", "-f"):
            disp_action = 1
        elif opt in ("--host", "-H"):
            tango_host = arg
        elif opt in ("--input", "-T"):
            # Undocumented feature to search by input type
            tgo_in_type = arg.lower()
        elif opt == "-j":
            fmt = "json"
        elif opt in ("--list", "-l"):
            disp_action = 4
        elif opt == "-m":
            # Undocumented feature to display in mark-down format
            fmt = "md"
        elif opt in ("--namespace", "-N"):
            kube_namespace = arg
        elif opt == "--no-headers":
            headers = False
        elif opt in ("--property", "-P"):
            tgo_prop = arg.lower()
        elif opt == "--off":
            dev_off = True
        elif opt == "--on":
            dev_on = True
        elif opt in ("--quick", "-q"):
            disp_action = 3
        elif opt in ("--short", "-s"):
            disp_action = 5
        elif opt in ("--show-db", "-t"):
            show_tango = True
        elif opt in ("--show-ns", "-n"):
            show_ns = True
        elif opt == "--simul":
            dev_sim = int(arg)
        elif opt == "--standby":
            dev_standby = True
        elif opt == "--status":
            dev_status = True
        elif opt == "-v":
            _module_logger.setLevel(logging.INFO)
        elif opt == "-V":
            _module_logger.setLevel(logging.DEBUG)
        elif opt == "--version":
            show_version = True
        else:
            _module_logger.error("Invalid option %s", opt)

    if show_version:
        print(f"{os.path.basename(y_arg[0])} version {__version__}")
        return 1

    if show_jargon:
        print_jargon()
        return 0

    if show_ns:
        show_namespaces()
        return 0

    if kube_namespace is None and tango_host is None:
        tango_host = os.getenv("TANGO_HOST")
        if tango_host is None:
            print("No Kubernetes namespace or Tango database server specified, TANGO_HOST not set")
            return 1

    if tango_host is None:
        tango_fqdn = f"{databaseds_name}.{kube_namespace}.svc.{cluster_domain}"
        tango_host = f"{tango_fqdn}:{databaseds_port}"
    elif ":" in tango_host:
        tango_fqdn = tango_host.split(":")[0]
    else:
        tango_fqdn = tango_host
        tango_host = f"{tango_fqdn}:{databaseds_port}"


    _module_logger.info("Use Tango host %s", tango_host)

    _module_logger.debug("Run commands: %s", cfg_data["run_commands_name"])
    _module_logger.debug("Run commands with name: %s", cfg_data["run_commands"])

    os.environ["TANGO_HOST"] = tango_host
    _module_logger.info("Set TANGO_HOST to %s", tango_host)

    if dev_admin is not None and tgo_name is not None:
        dut = TestTangoDevice(_module_logger, tgo_name)
        dut.test_admin_mode(dev_admin)
    elif dev_off and tgo_name is not None:
        dut = TestTangoDevice(_module_logger, tgo_name)
        if dut.dev is None:
            print(f"[FAILED] could not open device {tgo_name}")
            return 1
        dut.test_off(dev_sim)
    elif dev_on and tgo_name is not None:
        dut = TestTangoDevice(_module_logger, tgo_name)
        if dut.dev is None:
            print(f"[FAILED] could not open device {tgo_name}")
            return 1
        dut.test_on(dev_sim)
    elif dev_standby and tgo_name is not None:
        dut = TestTangoDevice(_module_logger, tgo_name)
        if dut.dev is None:
            print(f"[FAILED] could not open device {tgo_name}")
            return 1
        dut.test_standby(dev_sim)
    elif dev_status and tgo_name is not None:
        dut = TestTangoDevice(_module_logger, tgo_name)
        if dut.dev is None:
            print(f"[FAILED] could not open device {tgo_name}")
            return 1
        dut.test_status()
    elif dev_sim is not None and tgo_name is not None:
        dut = TestTangoDevice(_module_logger, tgo_name)
        if dut.dev is None:
            print(f"[FAILED] could not open device {tgo_name}")
            return 1
        dut.test_simulation_mode(dev_sim)
    # elif show_attrib and tgo_name is not None:
    #     dut = TestTangoDevice(_module_logger, tgo_name)
    #     if dut.dev is None:
    #         print(f"[FAILED] could not open device {tgo_name}")
    #         return 1
    #     dut.check_device()
    #     dut.get_simulation_mode()
    #     dut.show_device_attributes(True)
    elif show_command and tgo_name is not None:
        dut = TestTangoDevice(_module_logger, tgo_name)
        if dut.dev is None:
            print(f"[FAILED] could not open device {tgo_name}")
            return 1
        dut.check_device()
        # dut.get_simulation_mode()
        dut.show_device_attributes(True)
        dut.show_device_commands(True)
    elif tgo_attrib is not None and tgo_name is not None:
        dut = TestTangoDevice(_module_logger, tgo_name)
        if dut.dev is None:
            print(f"[FAILED] could not open device {tgo_name}")
            return 1
        dut.test_subscribe(tgo_attrib)
    elif tgo_name is not None:
        dut = TestTangoDevice(_module_logger, tgo_name)
        if dut.dev is None:
            print(f"[FAILED] could not open device {tgo_name}")
            return 1
        dut.test_all(show_attrib)
    else:
        pass

    devices = TangoctlDevices(
        _module_logger, evrythng, cfg_data, tgo_name, tgo_attrib, tgo_cmd, tgo_prop
    )
    devices.read_device_values()
    # devices.print_device_values()

    _module_logger.info("Read devices")

    if fmt == "txt":
        devices.print_txt(disp_action)
    elif fmt == "json":
        devices.print_json(disp_action)
    else:
        print("---")

    return 0


if __name__ == "__main__":
    try:
        main(sys.argv)
    except KeyboardInterrupt:
        pass
